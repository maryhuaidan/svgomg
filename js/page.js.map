{"version":3,"file":"page.js","sources":["../../src/js/page/utils.js","../../src/js/page/ui/pan-zoom.js","../../src/js/page/ui/results.js","../../node_modules/rollup-plugin-node-builtins/src/es6/events.js","../../src/js/utils/storage.js","../../src/js/page/worker-messenger.js","../../src/js/page/gzip.js","../../src/js/page/svg-file.js","../../src/js/page/ui/svg-output.js","../../src/js/page/ui/code-output.js","../../src/js/page/prism.js","../../src/js/page/ui/output.js","../../src/js/page/ui/ripple.js","../../src/js/page/ui/spinner.js","../../src/js/page/ui/floating-action-button.js","../../src/js/page/ui/download-button.js","../../src/js/page/ui/copy-button.js","../../src/js/page/ui/bg-fill-button.js","../../src/js/page/ui/material-slider.js","../../src/js/page/ui/settings.js","../../src/js/page/ui/main-menu.js","../../src/js/page/ui/toasts.js","../../src/js/page/ui/file-drop.js","../../src/js/page/ui/preloader.js","../../src/js/page/ui/changelog.js","../../src/js/page/ui/results-container.js","../../src/js/page/ui/view-toggler.js","../../src/js/page/results-cache.js","../../src/js/page/ui/main-ui.js","../../src/js/page/main-controller.js","../../src/js/page/svgo.js","../../src/js/page/index.js"],"sourcesContent":["\"use strict\";\n\nexport const domReady = new Promise(resolve => {\n  function checkState() {\n    if (document.readyState != 'loading') resolve();\n  }\n  document.addEventListener('readystatechange', checkState);\n  checkState();\n});\n\nconst range = document.createRange();\nrange.selectNode(document.documentElement);\n\nexport function strToEl(str) {\n  const frag = range.createContextualFragment(str);\n  return frag.children[0];\n}\n\nconst entityMap = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  \"/\": '&#x2F;'\n};\n\nexport function escapeHTML(str) {\n  return String(str).replace(/[&<>\"'\\/]/g, s => entityMap[s]);\n}\n\nexport function escapeHtmlTag(strings, ...values) {\n  values = values.map(s => escapeHTML(s));\n  return strings.reduce((str, val, i) => str += val + (values[i] || ''), '');\n};\n\nexport function readFileAsText(file) {\n  return new Response(file).text();\n};\n\nfunction transitionClassFunc({removeClass = false}={}) {\n  return function(el, className = 'active', transitionClass = 'transition') {\n    if (removeClass) {\n      if (!el.classList.contains(className)) return Promise.resolve();\n    }\n    else {\n      if (el.classList.contains(className)) return Promise.resolve();\n    }\n\n    return new Promise(resolve => {\n      const listener = event => {\n        if (event.target != el) return;\n        el.removeEventListener('webkitTransitionEnd', listener);\n        el.removeEventListener('transitionend', listener);\n        el.classList.remove(transitionClass);\n        resolve();\n      };\n\n      el.classList.add(transitionClass);\n\n      requestAnimationFrame(() => {\n        el.addEventListener('webkitTransitionEnd', listener);\n        el.addEventListener('transitionend', listener);\n        el.classList[removeClass ? 'remove' : 'add'](className);\n      });\n    });\n  }\n}\n\nexport const transitionToClass = transitionClassFunc();\nexport const transitionFromClass = transitionClassFunc({removeClass: true});\n\nexport function loadCss(url) {\n  return new Promise((resolve, reject) => {\n    const link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = url;\n\n    link.addEventListener('load', () => resolve());\n    link.addEventListener('error', () => reject());\n\n    document.head.appendChild(link);\n  });\n};\n\nexport function trackFocusMethod() {\n  var focusMethod = 'mouse';\n\n  document.body.addEventListener('focus', event => {\n    event.target.classList.add(focusMethod == 'key' ? 'key-focused' : 'mouse-focused');\n  }, true);\n\n  document.body.addEventListener('blur', event => {\n    event.target.classList.remove('key-focused');\n    event.target.classList.remove('mouse-focused');\n  }, true);\n\n  document.body.addEventListener('keydown', () => {\n    focusMethod = 'key';\n  }, true);\n\n  document.body.addEventListener('mousedown', () => {\n    focusMethod = 'mouse';\n  }, true);\n};\n","function getXY(obj) {\n  return {\n    x: obj.pageX,\n    y: obj.pageY\n  };\n}\n\nfunction touchDistance(touch1, touch2) {\n  const dx = Math.abs(touch2.x - touch1.x);\n  const dy = Math.abs(touch2.y - touch1.y);\n  return Math.sqrt(dx*dx + dy*dy);\n}\n\nfunction getMidpoint(point1, point2) {\n  return {\n    x: (point1.x + point2.x) / 2,\n    y: (point1.y + point2.y) / 2\n  };\n}\n\nfunction getPoints(event) {\n  if (event.touches) {\n    return Array.from(event.touches).map(t => getXY(t));\n  }\n  else {\n    return [getXY(event)];\n  }\n}\n\nexport default class PanZoom {\n  constructor(target, {\n    eventArea = target,\n    shouldCaptureFunc = () => true\n  }={}) {\n    this._target = target;\n    this._shouldCaptureFunc = shouldCaptureFunc;\n    this._dx = 0;\n    this._dy = 0;\n    this._scale = 1;\n    this._active = 0;\n    this._lastPoints = [];\n\n    // bind\n    [\n      '_onPointerDown',\n      '_onPointerMove',\n      '_onPointerUp'\n    ].forEach(funcName => {\n      this[funcName] = this[funcName].bind(this);\n    })\n\n    // bound events\n    eventArea.addEventListener('mousedown', this._onPointerDown);\n    eventArea.addEventListener('touchstart', this._onPointerDown);\n\n    // unbonud\n    eventArea.addEventListener('wheel', e => this._onWheel(e));\n  }\n\n  reset() {\n    this._dx = 0;\n    this._dy = 0;\n    this._scale = 1;\n    this._update();\n  }\n\n  _onWheel(event) {\n    if (!this._shouldCaptureFunc(event.target)) return;\n    event.preventDefault();\n\n    const boundingRect = this._target.getBoundingClientRect();\n    let delta = event.deltaY;\n\n    if (event.deltaMode === 1) { // 1 is \"lines\", 0 is \"pixels\"\n      // Firefox uses \"lines\" when mouse is connected\n      delta *= 15;\n    }\n\n    // stop mouse wheel producing huge values\n    delta = Math.max(Math.min(delta, 60), -60);\n\n    const scaleDiff = (delta / 300) + 1;\n\n    // avoid to-small values\n    if (this._scale * scaleDiff < 0.05) return;\n\n    this._scale *= scaleDiff;\n    this._dx -= (event.pageX - boundingRect.left) * (scaleDiff - 1);\n    this._dy -= (event.pageY - boundingRect.top) * (scaleDiff - 1);\n    this._update();\n  }\n\n  _onFirstPointerDown(event) {\n    document.addEventListener('mousemove', this._onPointerMove);\n    document.addEventListener('mouseup', this._onPointerUp);\n    document.addEventListener('touchmove', this._onPointerMove);\n    document.addEventListener('touchend', this._onPointerUp);\n  }\n\n  _onPointerDown(event) {\n    if (event.type == 'mousedown' && event.which != 1) return;\n    if (!this._shouldCaptureFunc(event.target)) return;\n    event.preventDefault();\n\n    this._lastPoints = getPoints(event);\n    this._active++;\n\n    if (this._active === 1) {\n      this._onFirstPointerDown(event);\n    }\n  }\n\n  _onPointerMove(event) {\n    event.preventDefault();\n    const points = getPoints(event);\n    const averagePoint = points.reduce(getMidpoint);\n    const averageLastPoint = this._lastPoints.reduce(getMidpoint);\n    const boundingRect = this._target.getBoundingClientRect();\n\n    this._dx += averagePoint.x - averageLastPoint.x;\n    this._dy += averagePoint.y - averageLastPoint.y;\n\n    if (points[1]) {\n      const scaleDiff = touchDistance(points[0], points[1]) / touchDistance(this._lastPoints[0], this._lastPoints[1]);\n      this._scale *= scaleDiff;\n      this._dx -= (averagePoint.x - boundingRect.left) * (scaleDiff - 1);\n      this._dy -= (averagePoint.y - boundingRect.top) * (scaleDiff - 1);\n    }\n\n    this._update();\n    this._lastPoints = points;\n  }\n\n  _update() {\n    this._target.style.WebkitTransform = this._target.style.transform\n      = `translate3d(${this._dx}px, ${this._dy}px, 0) scale(${this._scale})`;\n  }\n\n  _onPointerUp(event) {\n    event.preventDefault();\n    this._active--;\n    this._lastPoints.pop();\n\n    if (this._active) {\n      this._lastPoints = getPoints(event);\n      return;\n    }\n\n    document.removeEventListener('mousemove', this._onPointerMove);\n    document.removeEventListener('mouseup', this._onPointerUp);\n    document.removeEventListener('touchmove', this._onPointerMove);\n    document.removeEventListener('touchend', this._onPointerUp);\n  }\n}\n","import { strToEl } from '../utils';\n\nfunction round(num, places) {\n  const mult = Math.pow(10, places);\n  return Math.floor(Math.round(num * mult)) / mult;\n}\n\nfunction humanSize(bytes) {\n  if (bytes < 1024) {\n    return bytes + ' bytes';\n  }\n  else {\n    return round(bytes / 1024, 2) + 'k';\n  }\n}\n\nexport default class Results {\n  constructor() {\n    this.container = strToEl(\n      '<div class=\"results\">' +\n        '<span class=\"size\"></span> ' +\n        '<span class=\"diff\"></span>' +\n      '</div>' +\n    '');\n\n    this._sizeEl = this.container.querySelector('.size');\n    this._newSizeEl = this.container.querySelector('.newSize');\n    this._diffEl = this.container.querySelector('.diff');\n  }\n\n  update({ size, comparisonSize }) {\n    if (comparisonSize) {\n      this._sizeEl.textContent = humanSize(comparisonSize) + ' â†’ ' + humanSize(size);\n    } else {\n      this._sizeEl.textContent = humanSize(size);\n    }\n\n    this._diffEl.classList.remove('decrease', 'increase');\n\n    // just displaying a single size?\n    if (!comparisonSize) {\n      this._diffEl.textContent = '';\n      return;\n    }\n    else if (size === comparisonSize) {\n      this._diffEl.textContent = '100%';\n    }\n    else {\n      this._diffEl.textContent = round(size / comparisonSize * 100, 2) + '%';\n      this._diffEl.classList.add(size > comparisonSize ? 'increase' : 'decrease');\n    }\n  }\n}\n","'use strict';\n\nvar domain;\n\n// This constructor is used to store event handlers. Instantiating this is\n// faster than explicitly calling `Object.create(null)` to get a \"clean\" empty\n// object (tested with v8 v4.9).\nfunction EventHandlers() {}\nEventHandlers.prototype = Object.create(null);\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nexport default EventEmitter;\nexport {EventEmitter};\n\n// nodejs oddity\n// require('events') === require('events').EventEmitter\nEventEmitter.EventEmitter = EventEmitter\n\nEventEmitter.usingDomains = false;\n\nEventEmitter.prototype.domain = undefined;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this.domain = null;\n  if (EventEmitter.usingDomains) {\n    // if there is an active domain, then attach to it.\n    if (domain.active && !(this instanceof domain.Domain)) {\n      this.domain = domain.active;\n    }\n  }\n\n  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = new EventHandlers();\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events, domain;\n  var needDomainExit = false;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  domain = this.domain;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    er = arguments[1];\n    if (domain) {\n      if (!er)\n        er = new Error('Uncaught, unspecified \"error\" event');\n      er.domainEmitter = this;\n      er.domain = domain;\n      er.domainThrown = false;\n      domain.emit('error', er);\n    } else if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n    // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n    // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  if (needDomainExit)\n    domain.exit();\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = new EventHandlers();\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] :\n                                          [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n                            existing.length + ' ' + type + ' listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        emitWarning(w);\n      }\n    }\n  }\n\n  return target;\n}\nfunction emitWarning(e) {\n  typeof console.warn === 'function' ? console.warn(e) : console.log(e);\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction _onceWrap(target, type, listener) {\n  var fired = false;\n  function g() {\n    target.removeListener(type, g);\n    if (!fired) {\n      fired = true;\n      listener.apply(target, arguments);\n    }\n  }\n  g.listener = listener;\n  return g;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || (list.listener && list.listener === listener)) {\n        if (--this._eventsCount === 0)\n          this._events = new EventHandlers();\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length; i-- > 0;) {\n          if (list[i] === listener ||\n              (list[i].listener && list[i].listener === listener)) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (list.length === 1) {\n          list[0] = undefined;\n          if (--this._eventsCount === 0) {\n            this._events = new EventHandlers();\n            return this;\n          } else {\n            delete events[type];\n          }\n        } else {\n          spliceOne(list, position);\n        }\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = new EventHandlers();\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = new EventHandlers();\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        for (var i = 0, key; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = new EventHandlers();\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        do {\n          this.removeListener(type, listeners[listeners.length - 1]);\n        } while (listeners[0]);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  var evlistener;\n  var ret;\n  var events = this._events;\n\n  if (!events)\n    ret = [];\n  else {\n    evlistener = events[type];\n    if (!evlistener)\n      ret = [];\n    else if (typeof evlistener === 'function')\n      ret = [evlistener.listener || evlistener];\n    else\n      ret = unwrapListeners(evlistener);\n  }\n\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, i) {\n  var copy = new Array(i);\n  while (i--)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","export let idbKeyval = (() => {\n  let db;\n\n  function getDB() {\n    if (!db) {\n      db = new Promise((resolve, reject) => {\n        const openreq = indexedDB.open('svgo-keyval', 1);\n\n        openreq.onerror = () => {\n          reject(openreq.error);\n        };\n\n        openreq.onupgradeneeded = () => {\n          // First time setup: create an empty object store\n          openreq.result.createObjectStore('keyval');\n        };\n\n        openreq.onsuccess = () => {\n          resolve(openreq.result);\n        };\n      });\n    }\n    return db;\n  }\n\n  async function withStore(type, callback) {\n    const db = await getDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction('keyval', type);\n      transaction.oncomplete = () => resolve();\n      transaction.onerror = () => reject(transaction.error);\n      callback(transaction.objectStore('keyval'));\n    });\n  }\n\n  return {\n    async get(key) {\n      let req;\n      await withStore('readonly', store => {\n        req = store.get(key);\n      });\n      return req.result;\n    },\n    set(key, value) {\n      return withStore('readwrite', store => {\n        store.put(value, key);\n      });\n    },\n    delete(key) {\n      return withStore('readwrite', store => {\n        store.delete(key);\n      });\n    }\n  };\n})();\n\n// iOS add-to-homescreen is missing IDB, or at least it used to.\n// I haven't tested this in a while.\nif (!self.indexedDB) {\n  idbKeyval = {\n    get: key => Promise.resolve(localStorage.getItem(key)),\n    set: (key, val) => Promise.resolve(localStorage.setItem(key, val)),\n    delete: key => Promise.resolve(localStorage.removeItem(key))\n  };\n}\n","\"use strict\";\n\nexport default class WorkerMessenger {\n  constructor(url) {\n    this._requestId = 0;\n    // worker jobs awaiting response { [requestId]: [ resolve, reject ] }\n    this._pending = {};\n    this._url = url;\n    this._worker = new Worker(this._url);\n    this._worker.onmessage = event => this._onMessage(event);\n  }\n\n  async release() {\n    if (this._worker) {\n      this._worker.terminate();\n      this._worker = null;\n    }\n    for (const key of Object.keys(this._pending)) {\n      this._fulfillPending(id, null, new Error(\"Worker terminated: \" + this._url));\n    }\n  }\n\n  _postMessage(message) {\n    this._worker.postMessage(message);\n  }\n\n  _onMessage(event) {\n    if (!event.data.id) {\n      console.log(\"Unexpected message\", event);\n      return;\n    }\n\n    this._fulfillPending(event.data.id, event.data.result, event.data.error);\n  }\n\n  _fulfillPending(id, result, error) {\n    const resolver = this._pending[id];\n\n    if (!resolver) {\n      console.log(\"No resolver for\", { id, result, error });\n      return;\n    }\n\n    delete this._pending[id];\n\n    if (error) {\n      resolver[1](new Error(error));\n      return;\n    }\n\n    resolver[0](result);\n  }\n\n  _requestResponse(message) {\n    return new Promise((resolve, reject) => {\n      message.id = ++this._requestId;\n      this._pending[message.id] = [resolve, reject];\n      this._postMessage(message);\n    });\n  }\n}\n","import WorkerMessenger from './worker-messenger';\n\nclass Gzip extends WorkerMessenger {\n  constructor() {\n    super('js/gzip-worker.js');\n  }\n\n  compress(svgData) {\n    return this._requestResponse({\n      data: svgData\n    });\n  }\n}\n\nexport const gzip = new Gzip();\n","import { gzip } from './gzip';\n\nexport default class SvgFile {\n  constructor(text, width, height) {\n    this.text = text;\n    this._compressedSize = null;\n    this._url = '';\n    this._blob = null;\n    this.width = width;\n    this.height = height;\n  }\n\n  async size({ compress }) {\n    if (!compress) {\n      return this.text.length;\n    }\n\n    if (!this._compressedSize) {\n      this._compressedSize = gzip.compress(this.text).then(r => r.byteLength);\n    }\n\n    return this._compressedSize;\n  }\n\n  _create() {\n    // IE GCs blobs once they're out of reference, even if they\n    // have an object url, so we have to keep in in reference.\n    this._blob = new Blob([this.text], {type: \"image/svg+xml\"});\n    this._url = URL.createObjectURL(this._blob);\n  }\n\n  get blob() {\n    if (!this._blob) this._create();\n    return this._blob;\n  }\n\n  get url() {\n    if (!this._url) this._create();\n    return this._url;\n  }\n\n  release() {\n    if (!this._url) return;\n\n    this._blob = null;\n    URL.revokeObjectURL(this._url);\n  }\n}\n","import { domReady, strToEl } from '../utils';\nimport PanZoom from './pan-zoom';\n\nexport default class SvgOutput {\n  constructor() {\n    this.container = strToEl(\n      '<div class=\"svg-output\">' +\n        '<div class=\"svg-container\">' +\n          '<iframe class=\"svg-frame\" sandbox=\"allow-scripts\"></iframe>' +\n        '</div>' +\n        // Stop touches going into the iframe.\n        // pointer-events + touch + iframe doesn't work in Chrome :(\n        '<div class=\"svg-clickjacker\"></div>' +\n      '</div>' +\n    '');\n\n\n    this._svgFrame = this.container.querySelector('.svg-frame');\n    this._svgFrame.scrolling = 'no';\n\n    this._svgContainer = this.container.querySelector('.svg-container');\n\n    domReady.then(() => {\n      this._panZoom = new PanZoom(this._svgContainer, {\n        eventArea: this.container\n      });\n    });\n  }\n\n  setSvg(svgFile) {\n    // I would rather use blob urls, but they don't work in Firefox\n    // All the internal refs break.\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1125667\n    const nextLoad = this._nextLoadPromise();\n    this._svgFrame.src = \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(svgFile.text);\n    this._svgFrame.width = svgFile.width;\n    this._svgFrame.height = svgFile.height;\n    return nextLoad;\n  }\n\n  reset() {\n    this._svgFrame.src = \"about:blank\";\n    this._panZoom.reset();\n  }\n\n  _nextLoadPromise() {\n    return new Promise(resolve => {\n      const onload = () => {\n        this._svgFrame.removeEventListener('load', onload);\n        resolve();\n      }\n      this._svgFrame.addEventListener('load', onload);\n    });\n  }\n}\n","import { strToEl } from '../utils';\nimport Prism from '../prism';\nconst prism = new Prism();\n\nexport default class CodeOutput {\n  constructor() {\n    this.container = strToEl(\n      '<div class=\"code-output\">' +\n        '<pre><code></code></pre>' +\n      '</div>' +\n    '');\n    this._codeEl = this.container.querySelector('code');\n  }\n\n  async setSvg(svgFile) {\n    this._codeEl.innerHTML = await prism.highlight(svgFile.text);\n  }\n\n  reset() {\n    this._codeEl.innerHTML = '';\n  }\n}\n","import WorkerMessenger from './worker-messenger';\n\nexport default class Prism extends WorkerMessenger {\n  constructor() {\n    super('js/prism-worker.js');\n  }\n\n  highlight(svgData) {\n    return this._requestResponse({\n      data: svgData\n    });\n  }\n}\n","import { strToEl, transitionToClass, transitionFromClass } from '../utils';\nimport SvgOutput from './svg-output';\nimport CodeOutput from './code-output';\n\nexport default class Output {\n  constructor() {\n    this.container = strToEl(\n      '<div class=\"output-switcher\"></div>' +\n    '');\n\n    this._types = {\n      image: new SvgOutput(),\n      code: new CodeOutput()\n    };\n\n    this._svgFile = null;\n    this._switchQueue = Promise.resolve();\n    this.set('image', {noAnimate: true});\n  }\n\n  update(svgFile) {\n    this._svgFile = svgFile;\n    return this._types[this._activeType].setSvg(svgFile);\n  }\n\n  reset() {\n    this._types[this._activeType].reset();\n  }\n\n  set(type, {\n    noAnimate = false\n  }={}) {\n    return this._switchQueue = this._switchQueue.then(async () => {\n      const toRemove = this._activeType && this._types[this._activeType].container;\n\n      this._activeType = type;\n      const toAdd = this._types[this._activeType].container;\n      this.container.appendChild(toAdd);\n\n      if (this._svgFile) await this.update(this._svgFile);\n\n      if (noAnimate) {\n        toAdd.classList.add('active');\n        if (toRemove) toRemove.classList.remove('active');\n      }\n      else {\n        const transitions = [\n          transitionToClass(toAdd)\n        ];\n\n        if (toRemove) transitions.push(transitionFromClass(toRemove));\n\n        await Promise.all(transitions);\n      }\n\n      if (toRemove) this.container.removeChild(toRemove);\n    })\n  }\n}\n","import { strToEl } from '../utils';\n\nexport default class Ripple {\n  constructor() {\n    this.container = strToEl('<div class=\"ripple\"></div>');\n  }\n\n  animate() {\n    this.container.classList.remove('animate');\n    this.container.offsetLeft;\n    this.container.classList.add('animate');\n  }\n}\n","import { strToEl } from '../utils';\n\nexport default class Spinner {\n  constructor() {\n    this.container = strToEl(\n      '<div class=\"spinner\">' +\n        '<div class=\"spinner-container\">' +\n          '<div class=\"spinner-layer\">' +\n            '<div class=\"circle-clipper left\">' +\n              '<div class=\"circle\"></div>' +\n            '</div>' +\n            '<div class=\"gap-patch\">' +\n              '<div class=\"circle\"></div>' +\n            '</div>' +\n            '<div class=\"circle-clipper right\">' +\n              '<div class=\"circle\"></div>' +\n            '</div>' +\n          '</div>' +\n        '</div>' +\n      '</div>' +\n    '');\n\n    this._showTimeout = null;\n    this.container.style.display = 'none';\n\n    const animEndListener = event => {\n      if (event.target == this.container) {\n        this.container.style.display = 'none';\n      }\n    };\n\n    this.container.addEventListener('webkitAnimationEnd', animEndListener);\n    this.container.addEventListener('animationend', animEndListener);\n  }\n\n  show(delay = 300) {\n    clearTimeout(this._showTimeout);\n    this.container.style.display = 'none';\n    this.container.classList.remove('cooldown');\n    this._showTimeout = setTimeout(() => {\n      this.container.style.display = '';\n    }, delay);\n  }\n\n  hide() {\n    clearTimeout(this._showTimeout);\n    this.container.classList.add('cooldown');\n  }\n}\n","import { strToEl } from '../utils';\nimport Ripple from './ripple';\nimport Spinner from './spinner';\n\nexport default class FloatingActionButton {\n  constructor({ title, href, iconSvg, classList, minor }) {\n    this.container = strToEl(\n      (href ? '<a>' : '<div role=\"button\" tabindex=\"0\">') +\n        iconSvg +\n      (href ? '</a>' : '</div>') +\n    '');\n\n    if (href) {\n      this.container.href = href;\n    }\n    if (title) {\n      this.container.setAttribute('title', title);\n    }\n    this.container.classList.add(minor ? 'minor-floating-action-button' : 'floating-action-button');\n    if (classList) {\n      classList.forEach((className) => { this.container.classList.add(className); });\n    }\n\n    this._ripple = new Ripple();\n    this.container.appendChild(this._ripple.container);\n\n    this._spinner = new Spinner();\n    this.container.appendChild(this._spinner.container);\n\n    this.container.addEventListener('click', event => this._onClick(event));\n  }\n\n  _onClick(event) {\n    this._ripple.animate();\n  }\n\n  working() {\n    this._spinner.show(500);\n  }\n\n  done() {\n    this._spinner.hide();\n  }\n}\n","import FloatingActionButton from './floating-action-button';\n\nexport default class DownloadButton extends FloatingActionButton {\n  constructor() {\n    const title = 'Download';\n\n    super({\n      title,\n      href: './',\n      iconSvg: (\n        '<svg viewBox=\"0 0 24 24\" class=\"icon\">' +\n          `<title>${title}</title>` +\n          '<path d=\"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z\"/>' +\n        '</svg>'\n      )\n    });\n\n    this._svgFile = null;\n  }\n\n  _onClick(event) {\n    super._onClick(event);\n\n    // IE compat\n    if ('msSaveBlob' in navigator) {\n      event.preventDefault();\n      navigator.msSaveBlob(this._svgFile.blob, this._svgFile.filename);\n    }\n  }\n\n  setDownload(filename, svgFile) {\n    this.container.download = filename;\n    this.container.href = svgFile.url;\n\n    // for IE compat\n    this._svgFile = svgFile;\n  }\n}\n","import FloatingActionButton from './floating-action-button';\n\nexport const copySupported = (document.queryCommandSupported && document.queryCommandSupported('copy'));\n\nexport default class CopyButton extends FloatingActionButton {\n  constructor() {\n    const title = 'Copy as text';\n\n    super({\n      title,\n      iconSvg: (\n        '<svg viewBox=\"0 0 24 24\" class=\"icon\">' +\n          `<title>${title}</title>` +\n          '<path d=\"M16 1H4C3 1 2 2 2 3v14h2V3h12V1zm3 4H8C7 5 6 6 6 7v14c0 1 1 2 2 2h11c1 0 2-1 2-2V7c0-1-1-2-2-2zm0 16H8V7h11v14z\"/>' +\n        '</svg>'\n      ),\n      minor: true\n    });\n\n    this._text = null;\n    this._pre = document.createElement('pre');\n  }\n\n  _onClick(event) {\n    super._onClick(event);\n    this._pre.textContent = this._text;\n    document.body.appendChild(this._pre);\n    getSelection().removeAllRanges();\n\n    const range = document.createRange();\n    range.selectNode(this._pre);\n\n    window.getSelection().addRange(range);\n\n    document.execCommand('copy');\n    getSelection().removeAllRanges();\n    document.body.removeChild(this._pre);\n  }\n\n  setCopyText(text, filename) {\n    this._text = text;\n  }\n}\n","import FloatingActionButton from './floating-action-button';\n\nexport default class BgFillButton extends FloatingActionButton {\n  constructor() {\n    const title = 'Preview on vivid background';\n\n    super({\n      title,\n      iconSvg: (\n        '<svg viewBox=\"0 0 24 24\" class=\"icon\">' +\n          `<title>${title}</title>` +\n          '<path d=\"M21.143 9.667c-.733-1.392-1.914-3.05-3.617-4.753-2.977-2.978-5.478-3.914-6.785-3.914-.414 0-.708.094-.86.246l-1.361 1.36c-1.899-.236-3.42.106-4.294.983-.876.875-1.164 2.159-.792 3.523.492 1.806 2.305 4.049 5.905 5.375.038.323.157.638.405.885.588.588 1.535.586 2.121 0s.588-1.533.002-2.119c-.588-.587-1.537-.588-2.123-.001l-.17.256c-2.031-.765-3.395-1.828-4.232-2.9l3.879-3.875c.496 2.73 6.432 8.676 9.178 9.178l-7.115 7.107c-.234.153-2.798-.316-6.156-3.675-3.393-3.393-3.175-5.271-3.027-5.498l1.859-1.856c-.439-.359-.925-1.103-1.141-1.689l-2.134 2.131c-.445.446-.685 1.064-.685 1.82 0 1.634 1.121 3.915 3.713 6.506 2.764 2.764 5.58 4.243 7.432 4.243.648 0 1.18-.195 1.547-.562l8.086-8.078c.91.874-.778 3.538-.778 4.648 0 1.104.896 1.999 2 1.999 1.105 0 2-.896 2-2 0-3.184-1.425-6.81-2.857-9.34zm-16.209-5.371c.527-.53 1.471-.791 2.656-.761l-3.209 3.206c-.236-.978-.049-1.845.553-2.445zm9.292 4.079l-.03-.029c-1.292-1.292-3.803-4.356-3.096-5.063.715-.715 3.488 1.521 5.062 3.096.862.862 2.088 2.247 2.937 3.458-1.717-1.074-3.491-1.469-4.873-1.462z\"/>' +\n        '</svg>'\n      ),\n      classList: [ 'fillAB' ],\n      minor: true\n    });\n  }\n\n  _onClick(event) {\n    super._onClick(event);\n    // event adds a background color\n    if (this.container.classList.contains('active')) {\n      this.container.classList.remove('active');\n      this.setColor('transparent');\n    }\n    else {\n      this.container.classList.add('active');\n      this.setColor('rgba(0, 0, 0, 0.7)');\n    }\n  }\n\n  setColor(color) {\n    document.documentElement.style.backgroundColor = color;\n  }\n}\n","import { strToEl } from '../utils';\n\nexport default class MaterialSlider {\n  constructor(rangeEl) {\n    this.container = strToEl(`\n      <div class=\"material-slider\">\n        <div class=\"track\">\n          <div class=\"track-on\"></div>\n          <div class=\"handle\">\n            <div class=\"arrow\"></div>\n            <div class=\"val\"></div>\n          </div>\n        </div>\n      </div>\n    `);\n\n    this.range = rangeEl;\n    this._handle = this.container.querySelector('.handle');\n    this._trackOn = this.container.querySelector('.track-on');\n    this._val = this.container.querySelector('.val');\n\n    rangeEl.parentNode.insertBefore(this.container, rangeEl);\n    this.container.insertBefore(rangeEl, this.container.firstChild);\n\n    rangeEl.addEventListener('input', () => this._onInputChange());\n    this.range.addEventListener('mousedown', () => this._onRangeMouseDown());\n    this.range.addEventListener('touchstart', () => this._onRangeTouchStart());\n    this.range.addEventListener('touchend', () => this._onRangeTouchEnd());\n\n    this._setPosition();\n  }\n\n  _onRangeTouchStart() {\n    this.range.focus();\n  }\n\n  _onRangeTouchEnd() {\n    this.range.blur();\n  }\n\n  _onRangeMouseDown() {\n    this.range.classList.add('active');\n\n    const upListener = e => {\n      // IE requires me to do this. Pah.\n      requestAnimationFrame(_ => {\n        this.range.blur();\n      })\n      this.range.classList.remove('active');\n      document.removeEventListener('mouseup', upListener);\n    }\n    document.addEventListener('mouseup', upListener);\n  }\n\n  set value(newVal) {\n    this.range.value = newVal;\n    this._update();\n  }\n\n  _onInputChange() {\n    this._update();\n  }\n\n  _update() {\n    requestAnimationFrame(() => this._setPosition());\n  }\n\n  _setPosition() {\n    const { min, max, value } = this.range;\n    const percent = (Number(value) - min) / (max - min);\n\n    this._trackOn.style.width =\n      this._handle.style.left = percent * 100 + \"%\";\n\n    this._val.textContent = value;\n  }\n}\n","import { EventEmitter } from 'events';\n\nimport { domReady } from '../utils';\nimport MaterialSlider from './material-slider';\n\nexport default class Settings extends EventEmitter {\n  constructor() {\n    super();\n\n    this._throttleTimeout = null;\n\n    domReady.then(() => {\n      this._pluginInputs = Array.from(\n        document.querySelectorAll('.settings .plugins input')\n      );\n      this._globalInputs = Array.from(\n        document.querySelectorAll('.settings .global input')\n      );\n\n      // map real range elements to Slider instances\n      this._sliderMap = new WeakMap();\n\n      // enhance ranges\n      Array.from(\n        document.querySelectorAll('.settings input[type=range]')\n      ).forEach(el => this._sliderMap.set(el, new MaterialSlider(el)));\n\n      this.container = document.querySelector('.settings');\n      this._scroller = document.querySelector('.settings-scroller');\n\n      this.container.addEventListener('change', e => this._onChange(e));\n      this.container.addEventListener('input', e => this._onChange(e));\n      this._scroller.addEventListener('wheel', e => this._onMouseWheel(e));\n\n      // Stop double-tap text selection.\n      // This stops all text selection which is kinda sad.\n      // I think this code will bite me.\n      this._scroller.addEventListener('mousedown', e => {\n        if (e.target.closest('input[type=range]')) return;\n        e.preventDefault();\n      });\n    });\n  }\n\n  _onMouseWheel(event) {\n    // Prevents bounce effect on desktop.\n    // Firefox uses DELTA_LINE on a mouse wheel, ignore it\n    if (!event.deltaMode) { // 0 is \"pixels\"\n      event.preventDefault();\n      event.currentTarget.scrollTop += event.deltaY;\n    }\n  }\n\n  _onChange(event) {\n    clearTimeout(this._throttleTimeout);\n\n    // throttle range\n    if (event.target.type == 'range') {\n      this._throttleTimeout = setTimeout(() => this.emit('change'), 150);\n    }\n    else {\n      this.emit('change');\n    }\n  }\n\n  setSettings(settings) {\n    for (const inputEl of this._globalInputs) {\n      if (!(inputEl.name in settings)) continue;\n\n      if (inputEl.type == 'checkbox') {\n        inputEl.checked = settings[inputEl.name];\n      }\n      else if (inputEl.type == 'range') {\n        this._sliderMap.get(inputEl).value = settings[inputEl.name];\n      }\n    }\n\n    for (const inputEl of this._pluginInputs) {\n      if (!(inputEl.name in settings.plugins)) continue;\n      inputEl.checked = settings.plugins[inputEl.name];\n    }\n  }\n\n  getSettings() {\n    // fingerprint is used for cache lookups\n    const fingerprint = [];\n\n    const output = {\n      plugins: {}\n    };\n\n    this._globalInputs.forEach(inputEl => {\n      if (inputEl.name != 'gzip' && inputEl.name != 'original') {\n        if (inputEl.type == 'checkbox') {\n          fingerprint.push(Number(inputEl.checked));\n        }\n        else {\n          fingerprint.push('|' + inputEl.value + '|');\n        }\n      }\n\n      if (inputEl.type == 'checkbox') {\n        output[inputEl.name] = inputEl.checked;\n      }\n      else {\n        output[inputEl.name] = inputEl.value;\n      }\n    });\n\n    this._pluginInputs.forEach(inputEl => {\n      fingerprint.push(Number(inputEl.checked));\n      output.plugins[inputEl.name] = inputEl.checked;\n    });\n\n    output.fingerprint = fingerprint.join();\n\n    return output;\n  }\n}\n","import {\n  domReady,\n  transitionFromClass,\n  transitionToClass,\n  readFileAsText\n} from '../utils';\nimport Spinner from './spinner';\nimport { EventEmitter } from 'events';\n\nexport default class MainMenu extends EventEmitter {\n  constructor() {\n    super();\n\n    this.allowHide = false;\n    this._spinner = new Spinner();\n\n    domReady.then(() => {\n      this.container = document.querySelector('.main-menu');\n      this._loadFileInput = document.querySelector('.load-file-input');\n      this._pasteInput = document.querySelector('.paste-input');\n      this._loadDemoBtn = document.querySelector('.load-demo');\n      this._loadFileBtn = document.querySelector('.load-file');\n      this._pasteLabel = document.querySelector('.menu-input');\n      this._overlay = this.container.querySelector('.overlay');\n      this._menu = this.container.querySelector('.menu');\n\n      document.querySelector('.menu-btn')\n        .addEventListener('click', e => this._onMenuButtonClick(e));\n\n      this._overlay.addEventListener('click', e => this._onOverlayClick(e));\n\n      this._loadFileBtn.addEventListener('click', e => this._onLoadFileClick(e));\n      this._loadDemoBtn.addEventListener('click', e => this._onLoadDemoClick(e));\n      this._loadFileInput.addEventListener('change', e => this._onFileInputChange(e));\n      this._pasteInput.addEventListener('input', e => this._onTextInputChange(e));\n    });\n  }\n\n  show() {\n    this.container.classList.remove('hidden');\n    transitionFromClass(this._overlay, 'hidden');\n    transitionFromClass(this._menu, 'hidden');\n  }\n\n  hide() {\n    if (!this.allowHide) return;\n    this.stopSpinner();\n    this.container.classList.add('hidden');\n    transitionToClass(this._overlay, 'hidden');\n    transitionToClass(this._menu, 'hidden');\n  }\n\n  stopSpinner() {\n    this._spinner.hide();\n  }\n\n  showFilePicker() {\n    this._loadFileInput.click();\n  }\n\n  _onOverlayClick(event) {\n    event.preventDefault();\n    this.hide();\n  }\n\n  _onMenuButtonClick(event) {\n    event.preventDefault();\n    this.show();\n  }\n\n  _onTextInputChange(event) {\n    const val = this._pasteInput.value.trim();\n\n    if (val.includes('</svg>')) {\n      this._pasteInput.value = '';\n      this._pasteInput.blur();\n\n      this._pasteLabel.appendChild(this._spinner.container);\n      this._spinner.show();\n\n      this.emit('svgDataLoad', {\n        data: val,\n        filename: 'image.svg'\n      });\n    }\n  }\n\n  _onLoadFileClick(event) {\n    event.preventDefault();\n    event.target.blur();\n    this.showFilePicker();\n  }\n\n  async _onFileInputChange(event) {\n    const file = this._loadFileInput.files[0];\n\n    if (!file) return;\n\n    this._loadFileBtn.appendChild(this._spinner.container);\n    this._spinner.show();\n\n    this.emit('svgDataLoad', {\n      data: await readFileAsText(file),\n      filename: file.name\n    });\n  }\n\n  async _onLoadDemoClick(event) {\n    event.preventDefault();\n    event.target.blur();\n    this._loadDemoBtn.appendChild(this._spinner.container);\n    this._spinner.show();\n\n    try {\n      this.emit('svgDataLoad', {\n        data: await fetch('test-svgs/car-lite.svg').then(r => r.text()),\n        filename: 'car-lite.svg'\n      });\n    }\n    catch (err) {\n      // This extra scope is working around a babel-minify bug.\n      // It's fixed in Babel 7.\n      {\n        this.stopSpinner();\n\n        let error;\n\n        if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n          error = Error(\"Demo not available offline\");\n        }\n        else {\n          error = Error(\"Couldn't fetch demo SVG\");\n        }\n\n        this.emit('error', { error });\n      }\n    }\n  }\n}\n","import { strToEl, transitionToClass } from '../utils';\n\nclass Toast {\n  constructor(message, duration, buttons) {\n    this.container = strToEl(\n      '<div class=\"toast\"><div class=\"toast-content\"></div></div>' +\n    '');\n\n    this._content = this.container.querySelector('.toast-content');\n    this._content.textContent = message;\n    this._answerResolve;\n    this._hideTimeout;\n\n    this.answer = new Promise(r => this._answerResolve = r);\n\n    buttons.forEach(button => {\n      var buttonEl = document.createElement('button');\n      buttonEl.className = 'unbutton';\n      buttonEl.textContent = button;\n      buttonEl.addEventListener('click', () => {\n        this._answerResolve(button);\n      });\n      this.container.appendChild(buttonEl);\n    });\n\n    if (duration) {\n      this._hideTimeout = setTimeout(() => this.hide(), duration);\n    }\n  }\n\n  hide() {\n    clearTimeout(this._hideTimeout);\n    this._answerResolve();\n    return transitionToClass(this.container, 'hide');\n  }\n}\n\nexport default class Toasts {\n  constructor() {\n    this.container = strToEl(\"<div class='toasts'></div>\");\n  }\n\n  show(message, {\n    duration = 0,\n    buttons = ['dismiss']\n  }={}) {\n    const toast = new Toast(message, duration, buttons);\n    this.container.appendChild(toast.container);\n\n    toast.answer.then(() => toast.hide()).then(() => {\n      this.container.removeChild(toast.container);\n    });\n\n    return toast;\n  }\n}\n","import {\n  strToEl,\n  domReady,\n  transitionToClass,\n  transitionFromClass,\n  readFileAsText\n} from '../utils';\nimport { EventEmitter } from 'events';\n\nexport default class FileDrop extends EventEmitter {\n  constructor() {\n    super();\n    this.container = strToEl(\n      '<div class=\"drop-overlay\">Drop it!</div>' +\n    '');\n\n    // drag events are horrid\n    this._activeEnters = 0;\n    this._currentEnteredElement = null;\n\n    domReady.then(_ => {\n      document.addEventListener('dragover', event => event.preventDefault());\n      document.addEventListener('dragenter', event => this._onDragEnter(event));\n      document.addEventListener('dragleave', event => this._onDragLeave(event));\n      document.addEventListener('drop', event => this._onDrop(event));\n    });\n  }\n\n  _onDragEnter(event) {\n    // firefox double-fires on window enter, this works around it\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1124645\n    if (this._currentEnteredElement == event.target) return;\n    this._currentEnteredElement = event.target;\n\n    if (!this._activeEnters++) {\n      transitionToClass(this.container);\n    }\n  }\n\n  _onDragLeave(event) {\n    this._currentEnteredElement = null;\n\n    if (!--this._activeEnters) {\n      transitionFromClass(this.container);\n    }\n  }\n\n  async _onDrop(event) {\n    event.preventDefault();\n\n    this._activeEnters = 0;\n    transitionFromClass(this.container);\n\n    const file = event.dataTransfer.files[0];\n    if (!file) return;\n\n    this.emit('svgDataLoad', {\n      data: await readFileAsText(file),\n      filename: file.name\n    });\n  }\n}\n","import { domReady, transitionFromClass } from '../utils';\n\nexport default class Preloader {\n  constructor() {\n    domReady.then(_ => {\n      this.container = document.querySelector('.preloader');\n      this.activated = this.container.classList.contains('active');\n      this.hide();\n    });\n  }\n\n  async hide() {\n    await transitionFromClass(this.container, 'active');\n    this.container.style.display = 'none';\n  }\n}\n","import { strToEl, escapeHtmlTag, transitionToClass, domReady } from '../utils';\n\nexport default class Changelog {\n  constructor(loadedVersion) {\n    this.container = strToEl('<section class=\"changelog\"></section>');\n    this._loadedVersion = loadedVersion;\n  }\n\n  async showLogFrom(lastLoadedVersion) {\n    if (lastLoadedVersion == this._loadedVersion) return;\n    const changelog = await fetch('changelog.json').then(r => r.json());\n    let startIndex = 0;\n    let endIndex = 0;\n\n    for (var i = 0; i < changelog.length; i++) {\n      const entry = changelog[i];\n\n      if (entry.version === this._loadedVersion) {\n        startIndex = i;\n      }\n      else if (entry.version === lastLoadedVersion) {\n        break;\n      }\n      endIndex = i + 1;\n    }\n\n    const changeLis = changelog.slice(startIndex, endIndex)\n      .reduce((arr, entry) => arr.concat(entry.changes), [])\n      .map(change => escapeHtmlTag`<li>${change}</li>`);\n\n    this.container.appendChild(strToEl('<h1>Updated!</h1>'));\n    this.container.appendChild(strToEl(\n      '<ul>' +\n        changeLis.join('') +\n      '</ul>' +\n    ''));\n\n    await domReady;\n    transitionToClass(this.container);\n  }\n}\n","import { domReady } from '../utils';\n\nexport default class ResultsContainer {\n  constructor(results) {\n    this._results = results;\n\n    domReady.then(_ => {\n      this._mobileContainer = document.querySelector('.results-container-mobile');\n      this._container = document.querySelector('.results-container');\n      this._query = matchMedia('(min-width: 640px)');\n\n      this._query.addListener(() => this._positionResults());\n      this._positionResults();\n    });\n  }\n\n  _positionResults() {\n    if (this._query.matches) {\n      this._container.appendChild(this._results.container);\n    }\n    else {\n      this._mobileContainer.appendChild(this._results.container);\n    }\n  }\n}\n","import { EventEmitter } from 'events';\nimport { domReady } from '../utils';\n\nexport default class ViewToggler extends EventEmitter {\n  constructor() {\n    super();\n    this.container = null;\n\n    domReady.then(() => {\n      this.container = document.querySelector('.view-toggler');\n\n      // stop browsers remembering previous form state\n      this.container.output[0].checked = true;\n\n      this.container.addEventListener('change', e => this._onChange(e));\n    });\n  }\n\n  _onChange(event) {\n    let value = this.container.output.value;\n\n    if (!value) { // some browsers don't support the nice shortcut above (eg Safari)\n      value = Array.from(this.container.output).reduce((value, input) => {\n        return value || (input.checked ? input.value : '');\n      }, '');\n    }\n\n    this.emit(\"change\", { value });\n  }\n}\n","export default class ResultsCache {\n  constructor(size) {\n    this._size = size;\n    this.purge();\n  }\n\n  purge() {\n    this._fingerprints = [];\n    this._items = [];\n    this._index = 0;\n  }\n\n  add(fingerprint, svgFile) {\n    const oldItem = this._items[this._index];\n\n    if (oldItem) {\n      // gc blob url\n      oldItem.release();\n    }\n\n    this._fingerprints[this._index] = fingerprint;\n    this._items[this._index] = svgFile;\n\n    this._index = (this._index + 1) % this._size;\n  }\n\n  match(fingerprint) {\n    return this._items[this._fingerprints.indexOf(fingerprint)];\n  }\n}\n","import { transitionToClass } from '../utils';\n\nexport default class MainUi {\n  constructor(...elements) {\n    this._activated = false;\n    this._toActivate = elements;\n  }\n\n  activate() {\n    if (this._activated) return;\n    this._activated = true;\n\n    return Promise.all(\n      this._toActivate.map(el => transitionToClass(el))\n    );\n  }\n}\n","import { idbKeyval as storage } from '../utils/storage';\nimport Svgo from './svgo';\nimport { domReady } from './utils';\nimport Output from './ui/output';\nimport DownloadButton from './ui/download-button';\nimport CopyButton from './ui/copy-button';\nimport { copySupported } from './ui/copy-button';\nimport BgFillButton from './ui/bg-fill-button';\nimport Results from './ui/results';\nimport Settings from './ui/settings';\nimport MainMenu from './ui/main-menu';\nimport Toasts from './ui/toasts';\nimport FileDrop from './ui/file-drop';\nimport Preloader from './ui/preloader';\nimport Changelog from './ui/changelog';\nimport ResultsContainer from './ui/results-container';\nimport ViewToggler from './ui/view-toggler';\nimport ResultsCache from './results-cache';\nimport MainUi from './ui/main-ui';\n\nconst svgo = new Svgo();\n\nexport default class MainController {\n  constructor() {\n    this._container = null;\n\n    // ui components\n    this._mainUi = null;\n    this._outputUi = new Output();\n    this._downloadButtonUi = new DownloadButton();\n    this._copyButtonUi = new CopyButton();\n    this._bgFillUi = new BgFillButton();\n    this._resultsUi = new Results();\n    this._settingsUi = new Settings();\n    this._mainMenuUi = new MainMenu();\n    this._toastsUi = new Toasts();\n    this._dropUi = new FileDrop();\n    this._preloaderUi = new Preloader();\n    this._changelogUi = new Changelog(self.version);\n    this._resultsContainerUi = new ResultsContainer(this._resultsUi);\n    this._viewTogglerUi = new ViewToggler();\n\n    // ui events\n    this._settingsUi.on('change', () => this._onSettingsChange());\n    this._mainMenuUi.on('svgDataLoad', e => this._onInputChange(e));\n    this._dropUi.on('svgDataLoad', e => this._onInputChange(e));\n    this._mainMenuUi.on('error', ({error}) => this._handleError(error));\n    this._viewTogglerUi.on('change', e => this._onViewSelectionChange(e));\n    window.addEventListener('keydown', e => this._onGlobalKeyDown(e));\n\n    // state\n    this._inputItem = null;\n    this._cache = new ResultsCache(10);\n    this._latestCompressJobId = 0;\n    this._userHasInteracted = false;\n    this._reloading = false;\n\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register('sw.js', {\n        scope: './'\n      }).then(registration => {\n        registration.addEventListener('updatefound', () => this._onUpdateFound(registration));\n      });\n    }\n\n    // tell the user about the latest update\n    storage.get('last-seen-version').then(lastSeenVersion => {\n      if (lastSeenVersion) {\n        this._changelogUi.showLogFrom(lastSeenVersion);\n      }\n      storage.set('last-seen-version', self.version);\n    });\n\n    domReady.then(() => {\n      this._container = document.querySelector('.app-output');\n\n      // elements for intro anim\n      this._mainUi = new MainUi(\n        document.querySelector('.toolbar'),\n        document.querySelector('.action-button-container'),\n        this._outputUi.container,\n        this._settingsUi.container\n      );\n\n      const actionContainer = document.querySelector('.action-button-container');\n      const minorActionContainer = document.querySelector('.minor-action-container');\n\n      minorActionContainer.appendChild(this._bgFillUi.container);\n\n      if (copySupported) {\n        minorActionContainer.appendChild(this._copyButtonUi.container);\n      }\n\n      actionContainer.appendChild(this._downloadButtonUi.container);\n\n      document.querySelector('.output').appendChild(this._outputUi.container);\n      this._container.appendChild(this._toastsUi.container);\n      this._container.appendChild(this._dropUi.container);\n      document.querySelector('.menu-extra').appendChild(this._changelogUi.container);\n\n      // load previous settings\n      this._loadSettings();\n\n      // someone managed to hit the preloader, aww\n      if (this._preloaderUi.activated) {\n        this._toastsUi.show(\"Ready now!\", {\n          duration: 3000\n        });\n      }\n\n      // for testing\n      if (false) {\n        (async () => {\n          this._onInputChange({\n            data: await fetch('test-svgs/car-lite.svg').then(r => r.text()),\n            filename: 'car-lite.svg'\n          });\n        })();\n      }\n    });\n  }\n\n  _onGlobalKeyDown(event) {\n    if (event.key === 'o' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      this._mainMenuUi.showFilePicker();\n    }\n  }\n\n  _onViewSelectionChange(event) {\n    this._outputUi.set(event.value);\n  }\n\n  _onUpdateFound(registration) {\n    const newWorker = registration.installing;\n\n    registration.installing.addEventListener('statechange', async () => {\n      if (this._reloading) return;\n\n      // the very first activation!\n      // tell the user stuff works offline\n      if (newWorker.state == 'activated' && !navigator.serviceWorker.controller) {\n        this._toastsUi.show(\"Ready to work offline\", {\n          duration: 5000\n        });\n        return;\n      }\n\n      if (newWorker.state == 'activated' && navigator.serviceWorker.controller) {\n        // if the user hasn't interacted yet, do a sneaky reload\n        if (!this._userHasInteracted) {\n          this._reloading = true;\n          location.reload();\n          return;\n        }\n\n        // otherwise, show the user an alert\n        const toast = this._toastsUi.show(\"Update available\", {\n          buttons: ['reload', 'dismiss']\n        });\n\n        const answer = await toast.answer;\n\n        if (answer == 'reload') {\n          this._reloading = true;\n          location.reload();\n        }\n      }\n    });\n  }\n\n  _onSettingsChange() {\n    const settings = this._settingsUi.getSettings();\n    this._saveSettings(settings);\n    this._compressSvg(settings);\n  }\n\n  async _onInputChange(event) {\n    const settings = this._settingsUi.getSettings();\n    this._userHasInteracted = true;\n\n    try {\n      this._inputItem = await svgo.load(event.data);\n      this._inputFilename = event.filename;\n    }\n    catch(e) {\n      // This extra scope is working around a babel-minify bug.\n      // It's fixed in Babel 7.\n      {\n        const error = new Error(\"Load failed: \" + e.message);\n        this._mainMenuUi.stopSpinner();\n        this._handleError(error);\n        return;\n      }\n    }\n\n    this._cache.purge();\n\n    let firstIteration = true;\n\n    const compressed = () => {\n      if (firstIteration) {\n        this._outputUi.reset();\n        this._mainUi.activate();\n        this._mainMenuUi.allowHide = true;\n        this._mainMenuUi.hide();\n        firstIteration = false;\n      }\n    }\n\n    this._compressSvg(settings, () => compressed());\n\n    if (firstIteration) {\n      compressed();\n    }\n  }\n\n  _handleError(e) {\n    this._toastsUi.show(e.message);\n    console.error(e);\n  }\n\n  async _loadSettings() {\n    const settings = await storage.get('settings');\n    if (settings) this._settingsUi.setSettings(settings);\n  }\n\n  _saveSettings(settings) {\n    const copy = Object.assign({}, settings);\n    // doesn't make sense to retain the \"show original\" option\n    delete copy.original;\n    storage.set('settings', copy);\n  }\n\n  async _compressSvg(settings, iterationCallback = function(){}) {\n    const thisJobId = this._latestCompressJobId = Math.random();\n\n    await svgo.abortCurrent();\n\n    if (thisJobId != this._latestCompressJobId) {\n      // while we've been waiting, there's been a newer call\n      // to _compressSvg, we don't need to do anything\n      return;\n    }\n\n    if (settings.original) {\n      this._updateForFile(this._inputItem, {\n        compress: settings.gzip\n      });\n      return;\n    }\n\n    const cacheMatch = this._cache.match(settings.fingerprint);\n\n    if (cacheMatch) {\n      this._updateForFile(cacheMatch, {\n        compareToFile: this._inputItem,\n        compress: settings.gzip\n      });\n      return;\n    }\n\n    this._downloadButtonUi.working();\n\n    try {\n      const finalResultFile = await svgo.process(settings, resultFile => {\n        iterationCallback(resultFile);\n        this._updateForFile(resultFile, {\n          compareToFile: this._inputItem,\n          compress: settings.gzip\n        });\n      });\n\n      this._cache.add(settings.fingerprint, finalResultFile);\n    }\n    catch(e) {\n      if (e.message == \"abort\") return;\n      e.message = \"Minifying error: \" + e.message;\n      this._handleError(e);\n    }\n    finally {\n      this._downloadButtonUi.done();\n    }\n  }\n\n  async _updateForFile(svgFile, { compareToFile, compress }) {\n    this._outputUi.update(svgFile);\n    this._downloadButtonUi.setDownload(this._inputFilename, svgFile);\n    this._copyButtonUi.setCopyText(svgFile.text);\n\n    this._resultsUi.update({\n      comparisonSize: compareToFile && (await compareToFile.size({ compress })),\n      size: await svgFile.size({ compress })\n    });\n  }\n}\n\n","import WorkerMessenger from './worker-messenger';\nimport SvgFile from './svg-file';\n\nexport default class Svgo extends WorkerMessenger {\n  constructor() {\n    super('js/svgo-worker.js');\n    this._abortOnNextIteration = false;\n    this._currentJob = Promise.resolve();\n  }\n\n  async load(svgText) {\n    const {width, height} = await this._requestResponse({\n      action: 'load',\n      data: svgText\n    });\n\n    return new SvgFile(svgText, width, height);\n  }\n\n  process(settings, iterationCallback) {\n    return this._currentJob = this.abortCurrent().then(async () => {\n      this._abortOnNextIteration = false;\n\n      let result = await this._requestResponse({\n        action: 'process',\n        settings\n      });\n\n      var resultFile = new SvgFile(result.data, result.dimensions.width, result.dimensions.height);\n\n      iterationCallback(resultFile);\n\n      if (settings.multipass) {\n        while (result = await this.nextPass()) {\n          if (this._abortOnNextIteration) {\n            throw Error('abort');\n          }\n          resultFile = new SvgFile(result.data, result.dimensions.width, result.dimensions.height);\n          iterationCallback(resultFile);\n        }\n      }\n\n      // return final result\n      return resultFile;\n    });\n  }\n\n  nextPass() {\n    return this._requestResponse({\n      action: 'nextPass'\n    });\n  }\n\n  async abortCurrent() {\n    this._abortOnNextIteration = true;\n    await this._currentJob;\n  }\n\n  async release() {\n    await this.abortCurrent();\n    super.release();\n  }\n}\n","import { trackFocusMethod } from './utils';\nimport MainController from './main-controller';\n\ntrackFocusMethod();\nnew MainController();\n"],"names":["createContextualFragment","children","replace","map","reduce","Response","text","removeClass","classList","contains","Promise","resolve","target","removeEventListener","remove","add","requestAnimationFrame","addEventListener","x","pageX","y","pageY","Math","abs","sqrt","touches","Array","from","pow","floor","round","init","call","_maxListeners","defaultMaxListeners","length","apply","TypeError","_events","newListener","emit","listener","_eventsCount","unshift","push","warned","Error","name","emitter","type","count","console","warn","log","removeListener","arguments","pop","readyState","document","createRange","selectNode","documentElement","indexedDB","open","onerror","error","onupgradeneeded","result","createObjectStore","onsuccess","transaction","oncomplete","objectStore","get","set","put","delete","self","localStorage","getItem","setItem","removeItem","constructor","_requestId","_pending","_url","_worker","Worker","onmessage","_onMessage","release","terminate","Object","keys","_fulfillPending","id","_postMessage","postMessage","data","_requestResponse","compress","_compressedSize","_blob","width","height","size","then","byteLength","_create","Blob","URL","createObjectURL","blob","url","revokeObjectURL","eventArea","shouldCaptureFunc","_target","_shouldCaptureFunc","_dx","_dy","_scale","_active","_lastPoints","forEach","bind","_onPointerDown","_onWheel","reset","_update","preventDefault","getBoundingClientRect","deltaY","deltaMode","max","min","left","top","_onFirstPointerDown","_onPointerMove","_onPointerUp","which","style","WebkitTransform","transform","container","_svgFrame","querySelector","scrolling","_svgContainer","_panZoom","setSvg","_nextLoadPromise","src","encodeURIComponent","highlight","_codeEl","innerHTML","_types","image","code","_svgFile","_switchQueue","noAnimate","update","_activeType","appendChild","all","removeChild","animate","offsetLeft","_showTimeout","display","show","clearTimeout","setTimeout","hide","title","href","iconSvg","minor","setAttribute","_ripple","_spinner","_onClick","working","done","navigator","msSaveBlob","filename","setDownload","download","queryCommandSupported","_text","_pre","createElement","textContent","body","getSelection","removeAllRanges","window","addRange","execCommand","setCopyText","setColor","backgroundColor","_sizeEl","_newSizeEl","_diffEl","comparisonSize","prototype","create","EventEmitter","usingDomains","domain","active","Domain","getPrototypeOf","setMaxListeners","isNaN","getMaxListeners","domainEmitter","domainThrown","context","addListener","on","prependListener","once","prependOnceListener","removeAllListeners","listeners","listenerCount","eventNames","Reflect","ownKeys","range","_handle","_trackOn","_val","parentNode","insertBefore","firstChild","_onInputChange","_onRangeMouseDown","_onRangeTouchStart","_onRangeTouchEnd","_setPosition","focus","blur","value","_throttleTimeout","_pluginInputs","querySelectorAll","_globalInputs","_sliderMap","WeakMap","_scroller","_onChange","_onMouseWheel","closest","currentTarget","scrollTop","setSettings","checked","plugins","getSettings","fingerprint","join","allowHide","_loadFileInput","_pasteInput","_loadDemoBtn","_loadFileBtn","_pasteLabel","_overlay","_menu","_onMenuButtonClick","_onOverlayClick","_onLoadFileClick","_onLoadDemoClick","_onFileInputChange","_onTextInputChange","stopSpinner","showFilePicker","click","trim","includes","files","fetch","serviceWorker","controller","_content","_answerResolve","_hideTimeout","answer","className","duration","buttons","_activeEnters","_currentEnteredElement","_onDragEnter","_onDragLeave","_onDrop","dataTransfer","activated","_loadedVersion","showLogFrom","json","version","slice","concat","changes","_results","_mobileContainer","_container","_query","matchMedia","_positionResults","matches","output","_size","purge","_fingerprints","_items","_index","match","indexOf","_activated","_toActivate","activate","_abortOnNextIteration","_currentJob","load","action","process","abortCurrent","settings","dimensions","multipass","nextPass","_mainUi","_outputUi","_downloadButtonUi","_copyButtonUi","_bgFillUi","_resultsUi","_settingsUi","_mainMenuUi","_toastsUi","_dropUi","_preloaderUi","_changelogUi","_resultsContainerUi","_viewTogglerUi","_onSettingsChange","_handleError","_onViewSelectionChange","_onGlobalKeyDown","_inputItem","_cache","_latestCompressJobId","_userHasInteracted","_reloading","register","scope","_onUpdateFound","storage","_loadSettings","key","ctrlKey","metaKey","installing","state","location","reload","_saveSettings","_compressSvg","_inputFilename","message","assign","original","random","_updateForFile","gzip","compareToFile"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}