{"version":3,"file":"sw.js","sources":["../../src/js/sw/index.js","../../src/js/utils/storage.js"],"sourcesContent":["import {idbKeyval as storage} from '../utils/storage.js';\n\nconst version = SVGOMG_VERSION;\nconst cachePrefix = 'svgomg-';\nconst staticCacheName = `${cachePrefix}static-${version}`;\nconst fontCacheName = `${cachePrefix}fonts`;\nconst expectedCaches = [staticCacheName, fontCacheName];\n\naddEventListener('install', event => {\n  event.waitUntil((async () => {\n    const activeVersionPromise = storage.get('active-version');\n    const cache = await caches.open(staticCacheName);\n\n    await cache.addAll([\n      './',\n      'imgs/icon.png',\n      'css/all.css',\n      'js/gzip-worker.js',\n      'js/page.js',\n      'js/prism-worker.js',\n      'js/svgo-worker.js',\n      'changelog.json',\n      'https://fonts.googleapis.com/css?family=Roboto:400,700|Inconsolata'\n    ]);\n\n    const activeVersion = await activeVersionPromise;\n\n    // If it's a major version change, don't skip waiting\n    if (!activeVersion || activeVersion.split('.')[0] === version.split('.')[0]) {\n      self.skipWaiting();\n    }\n  })());\n});\n\naddEventListener('activate', event => {\n  event.waitUntil((async () => {\n    // remove caches beginning \"svgomg-\" that aren't in expectedCaches\n    for (const cacheName of await caches.keys()) {\n      if (!cacheName.startsWith(cachePrefix)) continue;\n      if (!expectedCaches.includes(cacheName)) await caches.delete(cacheName);\n    }\n\n    await storage.set('active-version', version);\n  })());\n});\n\nasync function handleFontRequest(request) {\n  const match = await caches.match(request);\n  if (match) return match;\n\n  const [response, fontCache] = Promise.all([\n    await fetch(request),\n    await caches.open(fontCacheName)\n  ]);\n\n  fontCache.put(request, response.clone());\n  return response;\n}\n\naddEventListener('fetch', event => {\n  const url = new URL(event.request.url);\n\n  if (url.host == 'fonts.gstatic.com') {\n    event.respondWith(handleFontRequest(event.request));\n    return;\n  }\n  event.respondWith(\n    caches.match(event.request).then(r => r || fetch(event.request))\n  );\n});\n","export let idbKeyval = (() => {\n  let db;\n\n  function getDB() {\n    if (!db) {\n      db = new Promise((resolve, reject) => {\n        const openreq = indexedDB.open('svgo-keyval', 1);\n\n        openreq.onerror = () => {\n          reject(openreq.error);\n        };\n\n        openreq.onupgradeneeded = () => {\n          // First time setup: create an empty object store\n          openreq.result.createObjectStore('keyval');\n        };\n\n        openreq.onsuccess = () => {\n          resolve(openreq.result);\n        };\n      });\n    }\n    return db;\n  }\n\n  async function withStore(type, callback) {\n    const db = await getDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction('keyval', type);\n      transaction.oncomplete = () => resolve();\n      transaction.onerror = () => reject(transaction.error);\n      callback(transaction.objectStore('keyval'));\n    });\n  }\n\n  return {\n    async get(key) {\n      let req;\n      await withStore('readonly', store => {\n        req = store.get(key);\n      });\n      return req.result;\n    },\n    set(key, value) {\n      return withStore('readwrite', store => {\n        store.put(value, key);\n      });\n    },\n    delete(key) {\n      return withStore('readwrite', store => {\n        store.delete(key);\n      });\n    }\n  };\n})();\n\n// iOS add-to-homescreen is missing IDB, or at least it used to.\n// I haven't tested this in a while.\nif (!self.indexedDB) {\n  idbKeyval = {\n    get: key => Promise.resolve(localStorage.getItem(key)),\n    set: (key, val) => Promise.resolve(localStorage.setItem(key, val)),\n    delete: key => Promise.resolve(localStorage.removeItem(key))\n  };\n}\n"],"names":["caches","match","Promise","all","fetch","open","put","clone","indexedDB","onerror","error","onupgradeneeded","result","createObjectStore","onsuccess","transaction","oncomplete","objectStore","get","set","delete","self","resolve","localStorage","getItem","setItem","removeItem","addEventListener","waitUntil","storage","addAll","split","skipWaiting","keys","startsWith","includes","URL","request","url","host","respondWith","then"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}